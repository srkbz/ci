#!/usr/bin/env python3
import json
from os import listdir
from os.path import exists, join, splitext

FLY_BIN = './tools/fly/fly'
FLY_TARGET = ['-t', 'srkbz-ci']
PIPELINE_FOLDERS = [
    './pipelines/specific',
    './pipelines/generated'
]


def cli():

    @command
    def login(username, password):
        install_fly()
        cmd(FLY_BIN, *FLY_TARGET, 'login',
            '-c', 'https://ci.srk.bz',
            '-u', username,
            '-p', password)

    @command
    def run():
        install_fly()

        current_user = json.loads(cmd(
            FLY_BIN, *FLY_TARGET, 'userinfo', '--json', stdout=subprocess.PIPE).stdout)["name"]

        existing_teams = json.loads(cmd(
            FLY_BIN, *FLY_TARGET, 'teams', '--json', stdout=subprocess.PIPE).stdout)
        existing_teams_names = list(t["name"] for t in existing_teams)
        teams_to_remove = existing_teams_names.copy()

        existing_pipelines = json.loads(cmd(
            FLY_BIN, *FLY_TARGET, 'pipelines', '-a', '--json', stdout=subprocess.PIPE).stdout)
        pipelines_to_remove = list(
            p["team_name"] + "/" + p["name"] for p in existing_pipelines)

        for pipeline_folder in PIPELINE_FOLDERS:
            if not exists(pipeline_folder):
                continue
            for team in listdir(pipeline_folder):
                try:
                    teams_to_remove.remove(team)
                except ValueError:
                    pass
                if team not in existing_teams_names:
                    cmd(FLY_BIN, *FLY_TARGET, 'set-team',
                        '--non-interactive',
                        '-n', team,
                        '--local-user', current_user)

                for pipeline in listdir(join(pipeline_folder, team)):
                    try:
                        pipelines_to_remove.remove(
                            f'{team}/{splitext(pipeline)[0]}')
                    except ValueError:
                        pass
                    cmd(FLY_BIN, *FLY_TARGET, 'set-pipeline', '-n',
                        '--team', team,
                        '-p', splitext(pipeline)[0],
                        '-c', join(pipeline_folder, team, pipeline))

        for pipeline_id in pipelines_to_remove:
            cmd(FLY_BIN, *FLY_TARGET, 'destroy-pipeline',
                '--non-interactive',
                '--team', pipeline_id.split("/")[0],
                '--pipeline', pipeline_id.split("/")[1])

        for team_name in teams_to_remove:
            if team_name == 'main':
                continue
            cmd(FLY_BIN, *FLY_TARGET, 'destroy-team',
                '--non-interactive',
                '--team-name', team_name)

    @command
    def fly(*args):
        cmd(FLY_BIN, *FLY_TARGET, *args)

    @command
    def install_fly(force=''):
        if (force == 'force'):
            cmd('bash', '-c', """
                set -euo pipefail

                rm -rf tools/fly
            """)
        if exists('./tools/fly'):
            return
        cmd('bash', '-c', """
            set -euo pipefail

            mkdir -p tools/fly
            cd tools/fly
            wget -O fly "https://ci.srk.bz/api/v1/cli?arch=amd64&platform=linux"
            chmod +x fly
        """)





# fmt: off
# https://gist.github.com/sirikon/d4327b6cc3de5cc244dbe5529d8f53ae
import inspect, sys, os, subprocess; os.chdir(os.path.dirname(__file__));commands = []
def cmd(*args, **kwargs): return subprocess.run(args, **kwargs, check=True)
def spec(f): return inspect.getfullargspec(f)
def command(func): commands.append(func); return func
cli(); args = sys.argv[1:]
if len(args) == 0: print("Available commands:"); [print(' '.join([
    f' {f.__name__}',
    *[f'<{a}>' for a in spec(f).args],
    *([f'<...{spec(f).varargs}>'] if spec(f).varargs is not None else [])
])) for f in commands]; exit(0)
matching_commands = [f for f in commands if f.__name__ == args[0]]
if len(matching_commands) == 0: print(f'Unknown command "{args[0]}"');sys.exit(1)
try: matching_commands[0](*args[1:])
except KeyboardInterrupt: pass
except subprocess.CalledProcessError as err: sys.exit(err.returncode)
